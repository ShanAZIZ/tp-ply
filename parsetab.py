
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDnonassocINFSUPPleftPLUSMINUSleftTIMESDIVIDEAND DIVIDE EQUALS FALSE IF INF LBRACE LPAREN MINUS NAME NUMBER OR PLUS PRINT RBRACE RPAREN SEMICOLON SUPP TIMES TRUE WHILESTART : blocbloc : bloc statement SEMICOLON \n    | statement SEMICOLON statement : PRINT LPAREN expression RPARENstatement : NAME EQUALS expressionstatement : IF LPAREN expression RPAREN LBRACE bloc RBRACEstatement : WHILE LPAREN expression RPAREN LBRACE bloc RBRACEstatement : expression\n    expression : expression PLUS expression\n                |   expression TIMES expression\n                |   expression MINUS expression\n                |   expression DIVIDE expression\n                |   expression AND expression\n                |   expression OR expression\n                |   expression SUPP expression\n                |   expression INF expression\n    expression : LPAREN expression RPARENexpression : TRUEexpression : FALSEexpression : NUMBERexpression : NAME'
    
_lr_action_items = {'PRINT':([0,2,14,29,46,47,48,49,],[4,4,-3,-2,4,4,4,4,]),'NAME':([0,2,5,14,15,18,19,20,21,22,23,24,25,26,27,28,29,46,47,48,49,],[7,7,17,-3,17,17,17,17,17,17,17,17,17,17,17,17,-2,7,7,7,7,]),'IF':([0,2,14,29,46,47,48,49,],[8,8,-3,-2,8,8,8,8,]),'WHILE':([0,2,14,29,46,47,48,49,],[9,9,-3,-2,9,9,9,9,]),'LPAREN':([0,2,4,5,8,9,14,15,18,19,20,21,22,23,24,25,26,27,28,29,46,47,48,49,],[5,5,15,5,27,28,-3,5,5,5,5,5,5,5,5,5,5,5,5,-2,5,5,5,5,]),'TRUE':([0,2,5,14,15,18,19,20,21,22,23,24,25,26,27,28,29,46,47,48,49,],[10,10,10,-3,10,10,10,10,10,10,10,10,10,10,10,10,-2,10,10,10,10,]),'FALSE':([0,2,5,14,15,18,19,20,21,22,23,24,25,26,27,28,29,46,47,48,49,],[11,11,11,-3,11,11,11,11,11,11,11,11,11,11,11,11,-2,11,11,11,11,]),'NUMBER':([0,2,5,14,15,18,19,20,21,22,23,24,25,26,27,28,29,46,47,48,49,],[12,12,12,-3,12,12,12,12,12,12,12,12,12,12,12,12,-2,12,12,12,12,]),'$end':([1,2,14,29,],[0,-1,-3,-2,]),'SEMICOLON':([3,6,7,10,11,12,13,17,31,32,33,34,35,36,37,38,39,40,43,50,51,],[14,-8,-21,-18,-19,-20,29,-21,-17,-9,-10,-11,-12,-13,-14,-15,-16,-5,-4,-6,-7,]),'PLUS':([6,7,10,11,12,16,17,30,31,32,33,34,35,36,37,38,39,40,41,42,],[18,-21,-18,-19,-20,18,-21,18,-17,-9,-10,-11,-12,18,18,18,18,18,18,18,]),'TIMES':([6,7,10,11,12,16,17,30,31,32,33,34,35,36,37,38,39,40,41,42,],[19,-21,-18,-19,-20,19,-21,19,-17,19,-10,19,-12,19,19,19,19,19,19,19,]),'MINUS':([6,7,10,11,12,16,17,30,31,32,33,34,35,36,37,38,39,40,41,42,],[20,-21,-18,-19,-20,20,-21,20,-17,-9,-10,-11,-12,20,20,20,20,20,20,20,]),'DIVIDE':([6,7,10,11,12,16,17,30,31,32,33,34,35,36,37,38,39,40,41,42,],[21,-21,-18,-19,-20,21,-21,21,-17,21,-10,21,-12,21,21,21,21,21,21,21,]),'AND':([6,7,10,11,12,16,17,30,31,32,33,34,35,36,37,38,39,40,41,42,],[22,-21,-18,-19,-20,22,-21,22,-17,-9,-10,-11,-12,-13,22,-15,-16,22,22,22,]),'OR':([6,7,10,11,12,16,17,30,31,32,33,34,35,36,37,38,39,40,41,42,],[23,-21,-18,-19,-20,23,-21,23,-17,-9,-10,-11,-12,-13,-14,-15,-16,23,23,23,]),'SUPP':([6,7,10,11,12,16,17,30,31,32,33,34,35,36,37,38,39,40,41,42,],[24,-21,-18,-19,-20,24,-21,24,-17,-9,-10,-11,-12,24,24,None,None,24,24,24,]),'INF':([6,7,10,11,12,16,17,30,31,32,33,34,35,36,37,38,39,40,41,42,],[25,-21,-18,-19,-20,25,-21,25,-17,-9,-10,-11,-12,25,25,None,None,25,25,25,]),'EQUALS':([7,],[26,]),'RPAREN':([10,11,12,16,17,30,31,32,33,34,35,36,37,38,39,41,42,],[-18,-19,-20,31,-21,43,-17,-9,-10,-11,-12,-13,-14,-15,-16,44,45,]),'RBRACE':([14,29,48,49,],[-3,-2,50,51,]),'LBRACE':([44,45,],[46,47,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'START':([0,],[1,]),'bloc':([0,46,47,],[2,48,49,]),'statement':([0,2,46,47,48,49,],[3,13,3,3,13,13,]),'expression':([0,2,5,15,18,19,20,21,22,23,24,25,26,27,28,46,47,48,49,],[6,6,16,30,32,33,34,35,36,37,38,39,40,41,42,6,6,6,6,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> START","S'",1,None,None,None),
  ('START -> bloc','START',1,'p_start','calcBase.py',86),
  ('bloc -> bloc statement SEMICOLON','bloc',3,'p_bloc','calcBase.py',92),
  ('bloc -> statement SEMICOLON','bloc',2,'p_bloc','calcBase.py',93),
  ('statement -> PRINT LPAREN expression RPAREN','statement',4,'p_statement_print','calcBase.py',102),
  ('statement -> NAME EQUALS expression','statement',3,'p_statement_variable','calcBase.py',107),
  ('statement -> IF LPAREN expression RPAREN LBRACE bloc RBRACE','statement',7,'p_statement_if','calcBase.py',113),
  ('statement -> WHILE LPAREN expression RPAREN LBRACE bloc RBRACE','statement',7,'p_statement_while','calcBase.py',117),
  ('statement -> expression','statement',1,'p_statement_expr','calcBase.py',121),
  ('expression -> expression PLUS expression','expression',3,'p_expression_parse','calcBase.py',127),
  ('expression -> expression TIMES expression','expression',3,'p_expression_parse','calcBase.py',128),
  ('expression -> expression MINUS expression','expression',3,'p_expression_parse','calcBase.py',129),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_parse','calcBase.py',130),
  ('expression -> expression AND expression','expression',3,'p_expression_parse','calcBase.py',131),
  ('expression -> expression OR expression','expression',3,'p_expression_parse','calcBase.py',132),
  ('expression -> expression SUPP expression','expression',3,'p_expression_parse','calcBase.py',133),
  ('expression -> expression INF expression','expression',3,'p_expression_parse','calcBase.py',134),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','calcBase.py',140),
  ('expression -> TRUE','expression',1,'p_expression_true','calcBase.py',144),
  ('expression -> FALSE','expression',1,'p_expression_false','calcBase.py',148),
  ('expression -> NUMBER','expression',1,'p_expression_number','calcBase.py',152),
  ('expression -> NAME','expression',1,'p_expression_name','calcBase.py',157),
]
